import unittest
import algorithms
from mock import generate_array


class TestAlgorithm(unittest.TestCase):

    def test_gnome_sort(self):
        for array in generate_array(10, 100):
            self.assertEqual(algorithms.gnome_sort(array), sorted(array))

    def test_reverse_gnome_sort(self):
        for array in generate_array(10, 100):
            self.assertEqual(
                algorithms.reverse_gnome_sort(array), sorted(array, reverse=True)
            )

    def test_yield_gnome_sort(self):
        array = [3, 2, 1, 4]
        steps = [
            {"0": 3, "1": 2, "2": 1, "3": 4, "i": 1},
            {"0": 2, "1": 3, "2": 1, "3": 4, "i": 0},
            {"0": 2, "1": 3, "2": 1, "3": 4, "i": 1},
            {"0": 2, "1": 3, "2": 1, "3": 4, "i": 2},
            {"0": 2, "1": 1, "2": 3, "3": 4, "i": 1},
            {"0": 1, "1": 2, "2": 3, "3": 4, "i": 0},
            {"0": 1, "1": 2, "2": 3, "3": 4, "i": 1},
            {"0": 1, "1": 2, "2": 3, "3": 4, "i": 2},
            {"0": 1, "1": 2, "2": 3, "3": 4, "i": 3},
            {"0": 1, "1": 2, "2": 3, "3": 4, "i": 4},
        ]

        self.assertEqual(list(algorithms.yield_gnome_sort(array)), steps)

    def test_yield_reverse_gnome_sort(self):
        array = [1, 2, 3, 4, 5]
        steps = [
            {"0": 1, "1": 2, "2": 3, "3": 4, "4": 5, "i": 1},
            {"0": 2, "1": 1, "2": 3, "3": 4, "4": 5, "i": 0},
            {"0": 2, "1": 1, "2": 3, "3": 4, "4": 5, "i": 1},
            {"0": 2, "1": 1, "2": 3, "3": 4, "4": 5, "i": 2},
            {"0": 2, "1": 3, "2": 1, "3": 4, "4": 5, "i": 1},
            {"0": 3, "1": 2, "2": 1, "3": 4, "4": 5, "i": 0},
            {"0": 3, "1": 2, "2": 1, "3": 4, "4": 5, "i": 1},
            {"0": 3, "1": 2, "2": 1, "3": 4, "4": 5, "i": 2},
            {"0": 3, "1": 2, "2": 1, "3": 4, "4": 5, "i": 3},
            {"0": 3, "1": 2, "2": 4, "3": 1, "4": 5, "i": 2},
            {"0": 3, "1": 4, "2": 2, "3": 1, "4": 5, "i": 1},
            {"0": 4, "1": 3, "2": 2, "3": 1, "4": 5, "i": 0},
            {"0": 4, "1": 3, "2": 2, "3": 1, "4": 5, "i": 1},
            {"0": 4, "1": 3, "2": 2, "3": 1, "4": 5, "i": 2},
            {"0": 4, "1": 3, "2": 2, "3": 1, "4": 5, "i": 3},
            {"0": 4, "1": 3, "2": 2, "3": 1, "4": 5, "i": 4},
            {"0": 4, "1": 3, "2": 2, "3": 5, "4": 1, "i": 3},
            {"0": 4, "1": 3, "2": 5, "3": 2, "4": 1, "i": 2},
            {"0": 4, "1": 5, "2": 3, "3": 2, "4": 1, "i": 1},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 0},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 1},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 2},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 3},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 4},
            {"0": 5, "1": 4, "2": 3, "3": 2, "4": 1, "i": 5},
        ]
        self.assertEqual(list(algorithms.yield_reverse_gnome_sort(array)), steps)


if __name__ == "__main__":
    unittest.main()
